{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Explore Publications\"\n",
        "execute:\n",
        "    eval: false\n",
        "---\n",
        "\n",
        "\n",
        "This notebook explore the publications citing Galaxy.\n"
      ],
      "id": "b17a83c0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import datetime\n",
        "import matplotlib.pyplot as plt\n",
        "import os\n",
        "import pandas as pd\n",
        "import pprint\n",
        "import re\n",
        "import requests\n",
        "import time\n",
        "\n",
        "from pathlib import Path\n",
        "from pyzotero import zotero\n",
        "from scholarly import ProxyGenerator, scholarly"
      ],
      "id": "c8fffeec",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "result_dp = Path(\"../results/citations/\") \n",
        "result_dp.mkdir(parents=True, exist_ok=True)"
      ],
      "id": "c83ca4a0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "searched_tags = [\n",
        "    'bacteri', # bacteria, bacterio\n",
        "    'prokaryot', # prokaryote, prokaryotic\n",
        "    'microb', # microbiome, microbiota, microbial, microbiology, microbe\n",
        "    'pathogen',\n",
        "    'virus',\n",
        "    'phage',\n",
        "    'archae',\n",
        "    'flora',\n",
        "    'microecology',\n",
        "    'microorganism', 'micro-organism',\n",
        "    'microbiome', 'microbiota',\n",
        "    'metabarcod', # metabarcode, metabarcoding\n",
        "        '16s', '16 s',\n",
        "        '18s',\n",
        "        'amplicon',\n",
        "        'metataxonom',\n",
        "    'metagenom', # metagenome, metagenomic\n",
        "    'metatranscriptom', # metatranscriptome, metatranscriptomic\n",
        "    'metaproteom', # metaproteome, metaproteomic\n",
        "    'multi-locus sequence typing', 'multilocus sequence typing', 'mlst',\n",
        "    'otu'\n",
        "]"
      ],
      "id": "e1cf3926",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def create_grouping_keywords():\n",
        "    return {\n",
        "        'Targeted organisms': {\n",
        "            'Bacteria': {\n",
        "                'keywords': ['bacteri', 'prokaryot'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            'Virus': {\n",
        "                'keywords': ['virus', 'phage'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            'Archaea': {\n",
        "                'keywords': ['archae'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            'Eukaryote': {\n",
        "                'keywords': ['eukaryot'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            'Microbiome': {\n",
        "                'keywords': ['microbiome', 'microbiota', 'flora', 'ecology', 'community', 'communities'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            'Pathogen': {\n",
        "                'keywords': ['pathogen'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            }\n",
        "        },\n",
        "        'Technical target': {\n",
        "            'Isolate': {\n",
        "                'keywords': ['isolate'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            'Community (taxonomy) profiling': {\n",
        "                'keywords': ['otu', 'asv', 'taxonom', 'community', 'communities', 'ecosystem', 'diversity', 'ecology'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            'Functional analysis': {\n",
        "                'keywords': ['function'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            'Interactome': {\n",
        "                'keywords': ['interaction'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            'AMR': {\n",
        "                'keywords': ['antimicrobial', 'resistan', 'amr'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            'MAGs': {\n",
        "                'keywords': ['mags', 'metagenome-assembled genome', 'assembly'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            'Gene identification / Biomarker': {\n",
        "                'keywords': ['gene identification', 'biomarker'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            'SNP': {\n",
        "                'keywords': ['snp', 'single-nucleotide polymorphism'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            '(M)LST': {\n",
        "                'keywords': ['mlst', 'locus sequence typing'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            'Annotation': {\n",
        "                'keywords': ['annotation'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            'Variant': {\n",
        "                'keywords': ['variant'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            'Comparative analysis': {\n",
        "                'keywords': ['comparative'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "        },\n",
        "        'Methods': {\n",
        "            'Metabarcoding': {\n",
        "                'keywords': ['metabarcod', '16s', '16 s', '18s', 'amplicon', 'metataxonom'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            '(Meta)genomics': {\n",
        "                'keywords': ['genom'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            'Metagenomics': {\n",
        "                'keywords': ['metagenom'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            '(Meta)transcriptomics': {\n",
        "                'keywords': ['transcriptom'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            'Metatranscriptomics': {\n",
        "                'keywords': ['metatranscriptom'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            '(Meta)proteomics': {\n",
        "                'keywords': ['proteom', 'mass spectrometry'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            'Metaproteomics': {\n",
        "                'keywords': ['metaproteom'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            'Metabolomics': {\n",
        "                'keywords': ['metabolom', 'metabolite'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "            'Imaging': {\n",
        "                'keywords': ['imaging'],\n",
        "                'location': ['tag', 'title', 'abstract'],\n",
        "                'counts': 0\n",
        "            },\n",
        "        }    \n",
        "    }\n",
        "\n",
        "def find_kw(string, kws):\n",
        "    '''\n",
        "    Return if a 1 keyword in a list is found in a string\n",
        "\n",
        "    :param string: string to search\n",
        "    :param kws: list of keywords to search\n",
        "    '''\n",
        "    found = False\n",
        "    for kw in kws:\n",
        "        if kw in string:\n",
        "            found = True\n",
        "    return found"
      ],
      "id": "3626a652",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Galaxy Publication Library\n",
        "\n",
        "The Galaxy Project uses the Zotero social bookmarking service to organize publications that reference Galaxy. The Galaxy Group lists published articles, conference proceedings, theses, book chapters and books that use, extend, reference or implement Galaxy.\n"
      ],
      "id": "769c9097"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "ZOTERO_API = os.getenv('ZOTERO_API')\n",
        "zot = zotero.Zotero('1732893', 'group', ZOTERO_API)"
      ],
      "id": "39f67ec7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "In this Galaxy Publication Library, the number of elements is:\n"
      ],
      "id": "6004eaf6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "element_nb = zot.count_items()\n",
        "element_nb"
      ],
      "id": "09a96c42",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Extract items based on keywords in tags, titles, and abstracts\n",
        "\n",
        "The library makes extensive use of tags to categorize publications and enable smarter searching. But only papers added after the library was moved to Zotero in September 2017 have automatically added tags.\n",
        "\n",
        "We extract items related to microbial data analysis by checking if their title, abstract, or tags contains any of following keywords:\n"
      ],
      "id": "41606678"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "conserved_items = []\n",
        "conserved_tags = set()\n",
        "excluded_tags = set()\n",
        "years = {\n",
        "    \"all\": {},\n",
        "    \"microbial\": {}\n",
        "}\n",
        "\n",
        "\n",
        "for y in range(2005, datetime.date.today().year+2):\n",
        "    years[\"all\"].setdefault(f\"{y}\", 0)\n",
        "    years[\"microbial\"].setdefault(f\"{y}\", 0)\n",
        "\n",
        "for item in zot.everything(zot.top()):\n",
        "    year = 0\n",
        "    \n",
        "    # get year\n",
        "    if \"date\" in item[\"data\"]:\n",
        "        match = re.match(r\".*(2[0-9]{3})\", item[\"data\"][\"date\"])\n",
        "        if match is not None:\n",
        "            year = match.group(1)\n",
        "            years[\"all\"][year] += 1\n",
        "    \n",
        "    to_add = False\n",
        "\n",
        "    # search in tags\n",
        "    for tag in item['data']['tags']:\n",
        "        for st in searched_tags:\n",
        "            if st in tag['tag'].lower():\n",
        "                conserved_tags.add(tag['tag'].lower())\n",
        "                to_add = True\n",
        "            else:\n",
        "                excluded_tags.add(tag['tag'].lower())\n",
        "\n",
        "    # search in title and abstract\n",
        "    for st in searched_tags:\n",
        "        if 'title' in item['data'] and st in item['data']['title'].lower():\n",
        "            to_add = True\n",
        "        if 'abstractNote' in item['data'] and st in item['data']['abstractNote'].lower():\n",
        "            to_add = True\n",
        "\n",
        "    # keep item if found\n",
        "    if to_add:\n",
        "        conserved_items.append(item)\n",
        "        if year != 0:\n",
        "            years[\"microbial\"][year] += 1"
      ],
      "id": "baffe0aa",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "*CONTINUE*"
      ],
      "id": "a4f50ba8"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\nikospech\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}