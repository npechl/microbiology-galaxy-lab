{
  "hash": "122e3d51326ef8aab75dd4edaa1a2d4b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tutorials\"\nexecute:\n    eval: true\n    warning: false\nformat:\n  html:\n    fig-width: 16\n    fig-height: 10\n---\n\n\n\n\n## Load `libraries`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"data.table\")\nlibrary(data.table)\n# install.packages(\"stringr\")\nlibrary(stringr)\n\n# install.packages(c(\"ggplot2\", \"ggrepel\", \"ggtext\", \"ggh4x\"))\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(ggtext)\nlibrary(ggh4x)\n\nlibrary(shadowtext)\n\n# install.packages(\"extrafont\")\nlibrary(extrafont)\n\nlibrary(packcircles)\n```\n:::\n\n\n\n\n## Load input dataset\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## THIS SECTION MIGHT THROUGH AN ERROR\n## THERE IS A BUG UNFORTUNATELY WITH fread FUNCTION\n## RUN ON CONSOLE IN THIS CASE\n\nmicroGalaxy_tutorials_url <- \"https://raw.githubusercontent.com/usegalaxy-eu/microgalaxy_paper_2025/refs/heads/main/docs/supplementary/supplementary_table_4.tsv\"\nmicroGalaxy_tools_url     <- \"https://raw.githubusercontent.com/usegalaxy-eu/microgalaxy_paper_2025/refs/heads/main/docs/supplementary/supplementary_table_2.tsv\"\n# all_tools_url             <- \"https://raw.githubusercontent.com/galaxyproject/galaxy_codex/refs/heads/main/communities/all/resources/tools.tsv\"\n\n\nmicroGalaxy_tutorials_dt <- microGalaxy_tutorials_url |> fread()\nmicroGalaxy_tools_dt     <- microGalaxy_tools_url |> fread()\n# all_tools_dt            <- all_tools_url |> fread()\n```\n:::\n\n\n\n\n## Compute number of tools and number of microGalaxy tools per tutorial\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1 ------------------------\n\ndt1 <- microGalaxy_tutorials_dt$Tools |> \n    str_split(\"\\\\,\") |>\n    lapply(str_squish) |>\n    lapply(function(q) data.table(\"Tool ID\" = q)) |>\n    rbindlist(idcol = \"Topic_id\")\n\ndt1$Topic <- microGalaxy_tutorials_dt[dt1$Topic_id]$Topic\ndt1$Title <- microGalaxy_tutorials_dt[dt1$Topic_id]$Title\n\ndt1$`EDAM topic`     <- microGalaxy_tutorials_dt[dt1$Topic_id]$`EDAM topic`\ndt1$`EDAM operation` <- microGalaxy_tutorials_dt[dt1$Topic_id]$`EDAM operation`\n\ntmp <- microGalaxy_tools_dt$`Tool IDs` |>\n    str_split(\"\\\\,\") |>\n    lapply(str_squish) |>\n    lapply(function(q) data.table(\"Tool ID\" = str_squish(q))) |>\n    rbindlist(idcol = \"id\")\n\ntmp$`Suite ID` <- microGalaxy_tools_dt[tmp$id]$`Suite ID`\n\nindex <- match(dt1$`Tool ID`, tmp$`Tool ID`)\n\ndt1$`Suite ID` = tmp[index]$`Suite ID`\n```\n:::\n\n\n\n\n### Exclude unnecessary columns\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmicroGalaxy_tutorials_dt$Topic                                      <- NULL\nmicroGalaxy_tutorials_dt$Link                                       <- NULL\nmicroGalaxy_tutorials_dt$`Servers with precise tool versions`       <- NULL\nmicroGalaxy_tutorials_dt$`Servers with tool but different versions` <- NULL\n```\n:::\n\n\n\n\n## Tools coverage graph: Heatmap\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt1$`Suite ID` <- ifelse(is.na(dt1$`Suite ID`) | dt1$`Suite ID` == \"\", \"Not Available\", dt1$`Suite ID`)\n\ndt1 <- dt1[which(`Suite ID` != \"Not Available\")]\n\ndt1$value <- 1\n\nmm <- dt1[, c(\"Title\", \"Suite ID\", \"value\"), with = FALSE] |> \n    unique() |> \n    dcast(Title ~ `Suite ID`, value.var = \"value\", fill = 0) |> \n    as.matrix(rownames = \"Title\")\n\n\nhc_x <- mm |> t() |> dist(method = \"binary\") |> hclust(\"ward.D2\")\nhc_y <- mm |> dist(method = \"binary\") |> hclust(\"ward.D2\")\n\n\n# c_r <- dt1[, by = Title, .(N = `Suite ID` |> unique() |> length())]\n# r_r <- dt1[, by = `Suite ID`, .(N = Title |> unique() |> length())]\n\n# c_r <- c_r[order(N)]\n# r_r <- r_r[order(-N)]\n\ndt1$Title <- dt1$Title |> factor(hc_y$labels[hc_y$order] |> rev())\ndt1$`Suite ID` <- dt1$`Suite ID` |> factor(hc_x$labels[hc_x$order] |> rev())\n\na_1 <- dt1 |>\n    ggplot(aes(`Suite ID`, Title)) +\n    geom_tile(color = \"grey96\") +\n    \n    scale_x_discrete(expand = c(0, 0)) +\n    scale_y_discrete(expand = c(0, 0)) +\n    \n    theme_minimal(base_family = \"Calibri\") +\n    theme(\n        axis.text.x = element_text(angle = 45, hjust = 1),\n        \n        panel.border = element_rect(fill = NA, linewidth = .3),\n        axis.ticks.x = element_line(linewidth = .3),\n        \n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(linetype = \"dashed\", lineend = \"round\", linewidth = .35),\n        \n        plot.margin = margin(10, 10, 10, 10)\n    ) +\n    \n    labs(y = \"Tutorials\", x = \"Galaxy Tool Suites\")\n\n\nedam_operations <- dt1$`EDAM operation` |>\n    str_split(\"\\\\,\") |>\n    unlist() |>\n    str_squish() |>\n    table() |>\n    as.data.table()\n\nedam_topics <- dt1$`EDAM topic` |>\n    str_split(\"\\\\,\") |>\n    unlist() |>\n    str_squish() |>\n    table() |>\n    as.data.table()\n\n\nedam_operations <- edam_operations[order(-N)] |> head(4)\nedam_topics     <- edam_topics[order(-N)] |> head(4)\n\n\ndt2 <- dt1 |> tidyr::separate_rows(\"EDAM topic\", sep = \",\") |> setDT()\ndt2 <- dt2 |> tidyr::separate_rows(\"EDAM operation\", sep = \",\") |> setDT()\n\ndt2$`EDAM topic`     <- dt2$`EDAM topic` |> str_squish() |> str_wrap(15)\ndt2$`EDAM operation` <- dt2$`EDAM operation` |> str_squish() |> str_wrap(15)\n\nedam_topics$V1     <- edam_topics$V1 |> str_wrap(15)\nedam_operations$V1 <- edam_operations$V1 |> str_wrap(15)\n\ndt2$`EDAM topic`     <- ifelse(dt2$`EDAM topic` %in% edam_topics$V1, dt2$`EDAM topic`, \"Other\")\ndt2$`EDAM operation` <- ifelse(dt2$`EDAM operation` %in% edam_operations$V1, dt2$`EDAM operation`, \"Other\")\n\ndt2$`EDAM topic`     <- dt2$`EDAM topic` |> factor(c(edam_topics$V1, \"Other\")) \ndt2$`EDAM operation` <- dt2$`EDAM operation` |> factor(c(edam_operations$V1, \"Other\")) \n\na_2 <- dt2 |>\n    ggplot(aes(`Suite ID`, Title)) +\n    geom_tile(color = \"white\") +\n    \n    scale_x_discrete(expand = c(0, 0)) +\n    scale_y_discrete(expand = c(0, 0)) +\n    \n    # facet_grid(rows = vars(edam_clean), scales = \"free\", space = \"free\") +\n    \n    # facet_nested_wrap(vars(`EDAM topic`, `EDAM operation`)) +\n    \n    facet_grid2(\n        rows = vars(`EDAM topic`),\n        cols = vars(`EDAM operation`),\n        space = \"free\",\n        scales = \"free\"\n    ) +\n    \n    theme_minimal(base_family = \"Calibri\") +\n    theme(\n        axis.text.x = element_text(size = 4, angle = 45, hjust = 1),\n        axis.text.y = element_text(size = 6),\n        \n        axis.title.x = element_text(margin = margin(t = 10)),\n        axis.title.y = element_text(margin = margin(r = 10)),\n        \n        panel.border = element_rect(fill = NA, color = \"grey\", linewidth = .3),\n        # axis.ticks = element_line(linewidth = .3, color = \"grey\"),\n        \n        strip.text.x = element_text(face = \"bold\"),\n        strip.text.y = element_text(face = \"bold\", angle = 0, hjust = 0),\n        \n        panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(linetype = \"dashed\", lineend = \"round\", linewidth = .15),\n        \n        plot.margin = margin(10, 10, 10, 10)\n    ) +\n    \n    labs(y = \"Tutorials\", x = \"Galaxy Tool Suites\")\n\na_2\n```\n\n::: {.cell-output-display}\n![](tutorials_files/figure-html/unnamed-chunk-5-1.svg)\n:::\n:::\n\n\n\n\n\n## EDAM ontology distribution: packcircles\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ----------------------\nd1 <- microGalaxy_tutorials_dt[, c(\"Title\", \"EDAM topic\"), with = FALSE] |>\n    tidyr::separate_rows(\"EDAM topic\", sep = \",\") |>\n    setDT()\n\nd2 <- microGalaxy_tutorials_dt[, c(\"Title\", \"EDAM operation\"), with = FALSE] |>\n    tidyr::separate_rows(\"EDAM operation\", sep = \",\") |>\n    setDT()\n\n# ---------------------\n\nd1$`EDAM topic` = d1$`EDAM topic` |> str_squish()\nd1$`EDAM topic` = ifelse(d1$`EDAM topic` == \"\", \"No Topic\", d1$`EDAM topic`)\n    \nd2$`EDAM operation` = d2$`EDAM operation` |> str_squish()\nd2$`EDAM operation` = ifelse(d2$`EDAM operation` == \"\", \"No Operation\", d2$`EDAM operation`)\n\nd1 = d1[, by = `EDAM topic`, .(N = Title |> unique() |> length())]\nd2 = d2[, by = `EDAM operation`, .(N = Title |> unique() |> length())]\n\n# ------------------------------\n\nd1$`EDAM topic length`     <- d1$`EDAM topic` |> str_length()\nd2$`EDAM operation length` <- d2$`EDAM operation` |> str_length()\n\nd1 <- d1[order(-N, `EDAM topic`)]\nd2 <- d2[order(-N, `EDAM operation`)]\n\n# Generate the layout. \n# sizetype can be area or radius, \n# following your preference on what to be proportional to value.\n\npacking_d1 <- circleProgressiveLayout(d1$N, sizetype = 'area') |> circleLayoutVertices(npoints = 100) |> setDT()\npacking_d2 <- circleProgressiveLayout(d2$N, sizetype = 'area') |> circleLayoutVertices(npoints = 100) |> setDT()\n\npacking_d1$strip <- d1[packing_d1$id]$`EDAM topic`\npacking_d2$strip <- d2[packing_d2$id]$`EDAM operation`\n\npacking_d1$`No. of Tutorials` <- d1[packing_d1$id]$N\npacking_d2$`No. of Tutorials` <- d2[packing_d2$id]$N\n\npacking_d1$pack <- \"EDAM topic\"\npacking_d2$pack <- \"EDAM operation\"\n\nd <- rbind(packing_d1, packing_d2)\n\nh <- d[which(`No. of Tutorials` > 2), by = .(pack, strip, `No. of Tutorials`), .(\n    x = (max(x) + min(x)) / 2,\n    y = (max(y) + min(y)) / 2\n)]\n\nh$strip <- h$strip |> str_wrap(width = 8)\n\nh$strip = h$strip |>\n    str_replace_all(\"Phylogenetic\\ntree\", \"Phylogenetic tree\") |>\n    str_replace_all(\"Box-Whisker\\nplot\", \"Box-Whisker\") |>\n    str_replace_all(\"Public\\nhealth\", \"Public health\") |>\n    str_replace_all(\"Nucleic\\nacid\", \"Nucleic acid\") |>\n    str_replace_all(\"sequence\\nanalysis\", \"sequence analysis\")\n\nb <- d |>\n    ggplot(aes(x, y, group = id)) + \n    geom_polygon(aes(fill = `No. of Tutorials`), color = \"grey96\", linewidth = 1) +\n\n    # geom_text_repel(\n    #     data = h[which(`No. of Tutorials` < 15)], aes(x, y, label = strip, size = `No. of Tutorials`), \n    #     inherit.aes = FALSE, max.overlaps = Inf, bg.color = \"grey96\", color = \"grey10\",\n    #     bg.r = .065, family = \"Calibri\"\n    # ) +\n        \n    geom_shadowtext(\n        data = h, aes(x, y, label = strip, size = `No. of Tutorials`),\n        inherit.aes = FALSE, bg.color = \"grey90\", color = \"grey20\", bg.r = .065,\n        family = \"Calibri\", fontface = \"bold\"\n    ) +\n    \n    scale_fill_stepsn(\n        colors = c('#00429d', '#2d58a7', '#456fb1', '#5986b9', '#6e9ec1', '#84b6c6', '#c6c6a9') |> rev(),\n        guide = guide_colorsteps(\n            barwidth = unit(10, \"lines\"),\n            barheight = unit(.5, \"lines\")\n        )\n    ) +\n    \n    scale_size_continuous(range = c(3, 4), guide = \"none\") +\n    \n    facet_wrap(vars(pack), nrow = 1) +\n    theme_void(base_family = \"Calibri\") + \n    theme(\n        legend.position = \"bottom\",\n        legend.title.position = \"top\",\n        \n        strip.text = element_text(face = \"bold\")\n    ) +\n    coord_equal()\n```\n:::",
    "supporting": [
      "tutorials_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}